------------------------------------------
----- =======[ Load WindUI ]
-------------------------------------------

local Version = "1.6.45"
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/download/" .. Version .. "/main.lua"))()

-------------------------------------------
----- =======[ GLOBAL & CORE FUNCTIONS ]
-------------------------------------------

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer

-- Safe require helper
local function safeRequire(pathTbl)
    local ptr = ReplicatedStorage
    for _, seg in ipairs(pathTbl) do
        ptr = ptr:FindFirstChild(seg)
        if not ptr then return nil end
    end
    local ok, mod = pcall(require, ptr)
    return ok and mod or nil
end

-- Initialize controllers and utilities
local FishingController = safeRequire({"Controllers","FishingController"})
local AnimationController = safeRequire({"Controllers","AnimationController"})
local Replion = safeRequire({"Packages","Replion"}) or safeRequire({"Packages","replion"})
local ItemUtility = safeRequire({"Shared","ItemUtility"})

-- Net folder helper
local function getNetFolder()
    local packages = ReplicatedStorage:WaitForChild("Packages", 10)
    if not packages then return nil end
    local index = packages:FindFirstChild("_Index")
    if index then
        for _, child in ipairs(index:GetChildren()) do
            if child.Name:match("^sleitnick_net@") then
                return child:FindFirstChild("net")
            end
        end
    end
    return ReplicatedStorage:FindFirstChild("net") or ReplicatedStorage:FindFirstChild("Net")
end

-- =========================
-- STATE MANAGEMENT
-- =========================
local state = {
    AutoFish = false,
    AutoFavourite = false,
    AutoSell = false,
}
local lastFarmPosition = nil
local lastCatchTimestamp = 0
local respawnTimerLoop = nil

-- Include Legendary, Mythic, Secret fish
local allowedTiers = { [5]=true, [6]=true, [7]=true }

-------------------------------------------
----- =======[ NOTIFY FUNCTION ]
-------------------------------------------

local function NotifySuccess(title, message, duration) WindUI:Notify({ Title = title, Content = message, Duration = duration or 5, Icon = "circle-check" }) end
local function NotifyError(title, message, duration) WindUI:Notify({ Title = title, Content = message, Duration = duration or 5, Icon = "ban" }) end
local function NotifyInfo(title, message, duration) WindUI:Notify({ Title = title, Content = message, Duration = duration or 5, Icon = "info" }) end
local function NotifyWarning(title, message, duration) WindUI:Notify({ Title = title, Content = message, Duration = duration or 5, Icon = "triangle-alert" }) end

-- =========================
-- CORE AUTOMATION FUNCTIONS
-- =========================
local autoFishLoop
local function stopAutoFish() state.AutoFish=false; if autoFishLoop then task.cancel(autoFishLoop); autoFishLoop=nil end; if respawnTimerLoop then task.cancel(respawnTimerLoop); respawnTimerLoop=nil end end
local function startAutoFish() state.AutoFish=true; if autoFishLoop then task.cancel(autoFishLoop) end; if respawnTimerLoop then task.cancel(respawnTimerLoop) end; lastCatchTimestamp=os.time(); respawnTimerLoop=task.spawn(function() while state.AutoFish do if os.time()-lastCatchTimestamp>60 then NotifyWarning("Anti-Stuck","Resetting character..."); if player.Character then player.Character:BreakJoints() end; lastCatchTimestamp=os.time() end; task.wait(1) end end); autoFishLoop=task.spawn(function() local n=getNetFolder(); if not n then stopAutoFish(); return end; local e,c,s,m=n:WaitForChild("RE/EquipToolFromHotbar"),n:WaitForChild("RF/ChargeFishingRod"),n:WaitForChild("RF/RequestFishingMinigameStarted"),n:WaitForChild("RE/FishingCompleted"); while state.AutoFish do if FishingController and FishingController.OnCooldown and FishingController:OnCooldown() then repeat task.wait(0.2) until not(FishingController:OnCooldown()) or not state.AutoFish end; if not state.AutoFish then break end; pcall(function() if AnimationController then AnimationController:PlayAnimation("CastFromFullChargePosition1Hand") end; e:FireServer(1); task.wait(0.1); c:InvokeServer(workspace:GetServerTimeNow()); task.wait(0.1); s:InvokeServer(-0.75,1); if AnimationController then AnimationController:PlayAnimation("Reel") end; task.wait(0.2); for i=1,20 do m:FireServer(); task.wait(0.05) end end); local t=os.clock(); while os.clock()-t<0.7 and state.AutoFish do task.wait() end end end) end
local function startAutoFavourite() task.spawn(function() while state.AutoFavourite do pcall(function() if not Replion or not ItemUtility then return end; local n=getNetFolder(); local f=n and n:FindFirstChild("RE/FavoriteItem"); if not f then return end; local d=Replion.Client:WaitReplion("Data"); local i=d and d:Get({"Inventory","Items"}); if type(i)~="table" then return end; for _,item in ipairs(i) do local b=ItemUtility:GetItemData(item.Id); if b and b.Data and allowedTiers[b.Data.Tier] and not item.Favorited then f:FireServer(item.UUID); item.Favorited=true end end end); task.wait(5) end end) end
local function startAutoSell() local lastSellTime=0; task.spawn(function() while state.AutoSell do pcall(function() if not Replion then return end; local d=Replion.Client:WaitReplion("Data"); local i=d and d:Get({"Inventory","Items"}); if type(i)~="table" then return end; local c=0; for _,item in ipairs(i) do if not item.Favorited then c=c+(item.Count or 1) end end; if c>=60 and os.time()-lastSellTime>=60 then local n=getNetFolder(); if n then local s=n:FindFirstChild("RF/SellAllItems"); if s then task.spawn(s.InvokeServer,s); lastSellTime=os.time() end end end end); task.wait(10) end end) end

-- =========================
-- TELEPORT & RESPAWN
-- =========================
local function teleportTo(pos) local char=player.Character or player.CharacterAdded:Wait(); local hrp=char:FindFirstChild("HumanoidRootPart") or char:WaitForChild("HumanoidRootPart"); if hrp then if type(pos) == "table" then hrp.CFrame=pos[math.random(1, #pos)] else hrp.CFrame=pos end end end
player.CharacterAdded:Connect(function(char) task.wait(2); if state.AutoFish and lastFarmPosition then NotifyInfo("Respawned","Returning to last farm location..."); teleportTo(lastFarmPosition) end end)

-- ==========================================
-- =======[ NEW EVENT FARMING LOGIC ]
-- ==========================================
local EVENT_MODELS_FOLDER = "Props"
local activeEventName = nil
local floatPlatform, savedCFrame, autoTPEvent, alreadyTeleported, monitoringTP = nil, nil, false, false, false
local autoFishToggle -- Forward declare for access in event logic

local function floatingPlat(enabled) if enabled then local hrp=player.Character and player.Character:FindFirstChild("HumanoidRootPart"); if not hrp then return end; floatPlatform=Instance.new("Part"); floatPlatform.Anchored,floatPlatform.Size,floatPlatform.Transparency,floatPlatform.Name,floatPlatform.Parent=true,Vector3.new(10,1,10),1,"FloatPlatform",workspace; task.spawn(function() while floatPlatform and floatPlatform.Parent do if hrp and hrp.Parent then floatPlatform.Position=hrp.Position-Vector3.new(0,3.5,0) end; task.wait(0.1) end end) else if floatPlatform then floatPlatform:Destroy(); floatPlatform=nil end end end
local function saveOriginalPosition() if player.Character and player.Character.HumanoidRootPart then savedCFrame=player.Character.HumanoidRootPart.CFrame end end
local function returnToOriginalPosition() if savedCFrame then teleportTo(savedCFrame); savedCFrame=nil end end
local function findEventModel(name) local ef=workspace:FindFirstChild(EVENT_MODELS_FOLDER); if ef then return ef:FindFirstChild(name,true) end; return nil end

local function monitorAutoTP()
    if monitoringTP then return end; monitoringTP=true
    task.spawn(function()
        while true do
            if autoTPEvent then
                if activeEventName and not alreadyTeleported then
                    local eventModel = findEventModel(activeEventName)
                    if eventModel and eventModel:IsA("Model") and eventModel.PrimaryPart then
                        saveOriginalPosition()
                        NotifySuccess("Event Found!", "Teleporting to: " .. activeEventName)
                        teleportTo(eventModel:GetPivot().Position + Vector3.new(0, 10, 0))
                        floatingPlat(true); alreadyTeleported=true
                        if autoFishToggle then autoFishToggle:Set(true) end; startAutoFish()
                    else
                        NotifyWarning("Event Scan", "Signal for '"..activeEventName.."' received, model not found yet.", 2)
                    end
                elseif not activeEventName and alreadyTeleported then
                    NotifyInfo("Event Ended", "Returning to start position.")
                    stopAutoFish(); returnToOriginalPosition(); floatingPlat(false); alreadyTeleported=false
                    if autoFishToggle then autoFishToggle:Set(false) end
                end
            elseif alreadyTeleported then
                stopAutoFish(); returnToOriginalPosition(); floatingPlat(false); alreadyTeleported=false
                if autoFishToggle then autoFishToggle:Set(false) end
            end
            task.wait(1)
        end
    end)
end

local function initializeEventListener()
    local replionPackage=ReplicatedStorage.Packages._Index:FindFirstChild("ytrev_replion",true)
    if not replionPackage then NotifyError("Event System","Could not find Replion package."); return end
    local arrayUpdateRemote=replionPackage:FindFirstChild("ArrayUpdate",true)
    if not arrayUpdateRemote then NotifyError("Event System","Could not find ArrayUpdate remote."); return end
    NotifySuccess("Event System", "Successfully hooked into event signal!")
    arrayUpdateRemote.OnClientEvent:Connect(function(...) local args={...}; if args[3]=="Events" then if args[2]=="i" and type(args[4])=="string" and args[4]~="" then activeEventName=args[4]; NotifyInfo("Event Signal","Event started: "..activeEventName) else if activeEventName then NotifyInfo("Event Signal","Event ended: "..activeEventName); activeEventName=nil end end end end)
end

-------------------------------------------
----- =======[ UI SETUP ]
-------------------------------------------
local Window = WindUI:CreateWindow({Title="e-Fishery V1",Icon="shrimp",Author="by Heyji",Folder="e-Fishery",Size=UDim2.fromOffset(600,400),Transparent=true,Theme="Dark",KeySystem=false,ScrollBarEnabled=true,HideSearchBar=true,User={Enabled=true,Anonymous=false}})
Window:EditOpenButton({Title="e-Fishery",Icon="shrimp",CornerRadius=UDim.new(0,19),StrokeThickness=2,Color=ColorSequence.new(Color3.fromHex("9600FF"),Color3.fromHex("AEBAF8")),Draggable=true})
Window:Tag({Title="STABLE",Color=Color3.fromHex("#30ff6a")}); WindUI:SetNotificationLower(true)

-- CORRECTED TAB DEFINITIONS
local Home = Window:Tab({ Title = "Developer Info", Icon = "hard-drive" })
local Main = Window:Tab({ Title = "Main", Icon = "toggle-right" })
local AutoFarm = Window:Tab({ Title = "Auto Farm", Icon = "map" })
local UtilitiesTab = Window:Tab({ Title = "Utilities", Icon = "atom" })
local FishNotif = Window:Tab({ Title = "Fish Notification", Icon = "bell-ring" })
local TradeTab = Window:Tab({ Title = "Auto Trade", Icon = "handshake" })

-------------------------------------------
----- =======[ HOME / DEVELOPER INFO TAB ]
-------------------------------------------
local InviteAPI="https://discord.com/api/v10/invites/"; local function LookupDiscordInvite(c) local s,r=pcall(game.HttpGet,game,InviteAPI..c.."?with_counts=true"); if s then local d=HttpService:JSONDecode(r); return {name=d.guild and d.guild.name or "Unknown",online=d.approximate_presence_count or 0,members=d.approximate_member_count or 0,icon=d.guild and d.guild.icon and "https://cdn.discordapp.com/icons/"..d.guild.id.."/"..d.guild.icon..".png" or ""} end; return nil end
local inviteData=LookupDiscordInvite("UyscFN7q7J"); if inviteData then Home:Paragraph({Title=string.format("[DISCORD] %s",inviteData.name),Desc=string.format("Members: %d\nOnline: %d",inviteData.members,inviteData.online),Image=inviteData.icon,ImageSize=50,Locked=true}) end

-------------------------------------------
----- =======[ MAIN TAB ]
-------------------------------------------
autoFishToggle = Main:Toggle({Title="Auto Fish",Callback=function(v) state.AutoFish=v; if v then startAutoFish() else stopAutoFish() end end})
Main:Toggle({Title="Auto Favourite",Callback=function(v) state.AutoFavourite=v; if v then startAutoFavourite() end end})
Main:Toggle({Title="Auto Sell",Callback=function(v) state.AutoSell=v; if v then startAutoSell() end end})

-------------------------------------------
----- =======[ AUTO FARM TAB (Original Simple Version) ]
-------------------------------------------
local island_locations = {
    ["Crater Islands"] = {CFrame.new(1066.1864, 57.2025681, 5045.5542, -0.682534158, 0, 0.730853677, 0, 1, 0, -0.730853677, 0, -0.682534158), CFrame.new(1057.28992, 33.0884132, 5133.79883, 0.833871782, 0, 0.551958203, 0, 1, 0, -0.551958203, 0, 0.833871782)},
    ["Tropical Grove"] = { CFrame.new(-2165.05469, 2.77070165, 3639.87451, -0.589090407, 0, -0.808067143, 0, 1, 0, 0.808067143, 0, -0.589090407) },
    ["Vulcano"] = { CFrame.new(-701.447937, 48.1446075, 93.1546631, -0.0770962164, 0, -0.997023642, 0, 1, 0, 0.997023642, 0, -0.0770962164) },
    ["Fisherman Island"] = { CFrame.new(-75.2439423, 3.24433279, 3103.45093, -0.996514142, 0, -0.0834242329, 0, 1, 0, 0.0834242329, 0, -0.996514142) },
}
for name, pos in pairs(island_locations) do AutoFarm:Button({Title=name,Callback=function() lastFarmPosition=pos; teleportTo(pos); task.wait(0.8); if autoFishToggle then autoFishToggle:Set(true) end end}) end

-------------------------------------------
----- =======[ UTILITIES TAB ]
-------------------------------------------
UtilitiesTab:Toggle({Title="Auto Farm Event", Desc="Listens for event signals and teleports.", Callback=function(v) autoTPEvent=v; if v then NotifyInfo("Event Farm Enabled","Listening for event signals...") else NotifyWarning("Event Farm Disabled","No longer listening for events.") end end})
UtilitiesTab:Button({Title="Teleport to Esoteric Island", Callback=function() teleportTo(CFrame.new(3231, -1303, 1401)); NotifySuccess("Teleport","Moving to Esoteric Island...") end})

-------------------------------------------
----- =======[ FISH NOTIFICATION TAB ]
-------------------------------------------
local FishDataById,VariantsByName,rarityMap={},{},{[1]="Common",[2]="Uncommon",[3]="Rare",[4]="Epic",[5]="Legendary",[6]="Mythic",[7]="Secret"}
pcall(function() for _,i in ipairs(ReplicatedStorage.Items:GetChildren()) do local ok,d=pcall(require,i); if ok and d.Data and d.Data.Type=="Fishes" then FishDataById[d.Data.Id]={Name=d.Data.Name,SellPrice=d.SellPrice or 0,Tier=d.Data.Tier,Icon=d.IconId or d.Data.Icon or ""} end end; for _,v in ipairs(ReplicatedStorage.Variants:GetChildren()) do local ok,d=pcall(require,v); if ok and d.Data and d.Data.Type=="Variant" then VariantsByName[d.Data.Name]=d.SellMultiplier or 1 end end end)
FishNotif:Paragraph({Title="Fish Notification",Color="Green",Desc=[[This feature sends a notification to Discord when you catch a rare fish.]]})

-------------------------------------------
----- =======[ AUTO TRADE TAB ]
-------------------------------------------
local targetUserId,tradeActive,selectedTradeCategory=nil,false,"Common"
TradeTab:Input({Title="Target Player",Desc="Enter the Display/Username to trade with.",Placeholder="Enter player name...",Callback=function(dn) targetUserId=nil; if dn=="" then return end; for _,p in ipairs(Players:GetPlayers()) do if string.lower(p.DisplayName)==string.lower(dn) or string.lower(p.Name)==string.lower(dn) then targetUserId=p.UserId; NotifySuccess("Trade Target Set","Targeting "..p.Name); return end end; NotifyError("Target Not Found","Could not find that player.") end})
TradeTab:Toggle({Title="Enable Item-Click Trading",Desc="Clicking an item in your inventory will send a trade.",Callback=function(v) tradeActive=v end})

-------------------------------------------
----- =======[ FINALIZATION ]
-------------------------------------------
-- Start the event listeners
initializeEventListener()
monitorAutoTP()
