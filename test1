------------------------------------------
----- =======[ Load WindUI ]
-------------------------------------------

local Version = "1.6.45"
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/download/" .. Version .. "/main.lua"))()

-------------------------------------------
----- =======[ GLOBAL & CORE FUNCTIONS ]
-------------------------------------------

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer

-- Safe require helper
local function safeRequire(pathTbl)
    local ptr = ReplicatedStorage
    for _, seg in ipairs(pathTbl) do
        ptr = ptr:FindFirstChild(seg)
        if not ptr then return nil end
    end
    local ok, mod = pcall(require, ptr)
    return ok and mod or nil
end

-- Initialize controllers and utilities
local FishingController = safeRequire({"Controllers","FishingController"})
local AnimationController = safeRequire({"Controllers","AnimationController"})
local Replion = safeRequire({"Packages","Replion"}) or safeRequire({"Packages","replion"})
local ItemUtility = safeRequire({"Shared","ItemUtility"})

-- Net folder helper
local function getNetFolder()
    local packages = ReplicatedStorage:WaitForChild("Packages", 10)
    if not packages then return nil end
    local index = packages:FindFirstChild("_Index")
    if index then
        for _, child in ipairs(index:GetChildren()) do
            if child.Name:match("^sleitnick_net@") then
                return child:FindFirstChild("net")
            end
        end
    end
    return ReplicatedStorage:FindFirstChild("net") or ReplicatedStorage:FindFirstChild("Net")
end

-- =========================
-- STATE MANAGEMENT
-- =========================
local state = {
    AutoFish = false,
    AutoFavourite = false,
    AutoSell = false,
    InfinityJump = false
}
local lastFarmPosition = nil
local lastCatchTimestamp = 0
local respawnTimerLoop = nil
local allowedTiers = { [5]=true, [6]=true, [7]=true }
local weatherActive = {}
local weatherData = {
    ["Storm"] = { duration = 900 }, ["Cloudy"] = { duration = 900 },
    ["Snow"] = { duration = 900 }, ["Wind"] = { duration = 900 }
}
local autoTPEvent = false
local savedCFrame = nil
local monitoringTP = false
local alreadyTeleported = false
local teleportTime = nil
local eventTarget = nil
local floatPlatform = nil
local knownEvents = {}
local floatPlatformEnabled = false
local fixedY_level = nil 


-------------------------------------------
----- =======[ NOTIFY FUNCTION ]
-------------------------------------------
local function NotifySuccess(title, message, duration) WindUI:Notify({ Title = title, Content = message, Duration = duration or 5, Icon = "circle-check" }) end
local function NotifyError(title, message, duration) WindUI:Notify({ Title = title, Content = message, Duration = duration or 5, Icon = "ban" }) end
local function NotifyInfo(title, message, duration) WindUI:Notify({ Title = title, Content = message, Duration = duration or 5, Icon = "info" }) end
local function NotifyWarning(title, message, duration) WindUI:Notify({ Title = title, Content = message, Duration = duration or 5, Icon = "triangle-alert" }) end

-- =========================
-- FPS BOOST FUNCTION
-- =========================
local fpsBoostActive = false
local function activateFpsBoost()
    if fpsBoostActive then return end
    pcall(function()
        for _, v in pairs(game:GetDescendants()) do
            if v:IsA("BasePart") then v.Material, v.Reflectance = Enum.Material.SmoothPlastic, 0
            elseif v:IsA("Decal") or v:IsA("Texture") then v.Transparency = 1 end
        end
        local Lighting = game:GetService("Lighting")
        for _, effect in pairs(Lighting:GetChildren()) do
            if effect:IsA("PostEffect") then effect.Enabled = false end
        end
        Lighting.GlobalShadows, Lighting.FogEnd = false, 1e10
        settings().Rendering.QualityLevel = "Level01"
    end)
    NotifyInfo("Performance", "FPS Boost activated.")
    fpsBoostActive = true
end

-- =========================
-- MAIN AUTOMATION FUNCTIONS
-- =========================
local function startAutoFavourite()
    task.spawn(function()
        while state.AutoFavourite do
            pcall(function()
                if not Replion or not ItemUtility then return end
                local favoriteRemote = getNetFolder() and getNetFolder():FindFirstChild("RE/FavoriteItem")
                if not favoriteRemote then return end
                local items = Replion.Client:WaitReplion("Data"):Get({"Inventory","Items"})
                if type(items) ~= "table" then return end
                for _, item in ipairs(items) do
                    local base = ItemUtility:GetItemData(item.Id)
                    if base and base.Data and allowedTiers[base.Data.Tier] and not item.Favorited then
                        favoriteRemote:FireServer(item.UUID)
                        item.Favorited = true
                    end
                end
            end)
            task.wait(5)
        end
    end)
end

local lastSellTime = 0
local function startAutoSell()
    task.spawn(function()
        while state.AutoSell do
            pcall(function()
                if not Replion then return end
                local items = Replion.Client:WaitReplion("Data"):Get({"Inventory","Items"})
                if type(items) ~= "table" then return end
                local unfavoritedCount = 0
                for _, item in ipairs(items) do
                    if not item.Favorited then unfavoritedCount = unfavoritedCount + (item.Count or 1) end
                end
                if unfavoritedCount >= 60 and os.time() - lastSellTime >= 60 then
                    local sellFunc = getNetFolder() and getNetFolder():FindFirstChild("RF/SellAllItems")
                    if sellFunc then task.spawn(sellFunc.InvokeServer, sellFunc); lastSellTime = os.time() end
                end
            end)
            task.wait(10)
        end
    end)
end

local autoFishLoop
local function startAutoFish()
    activateFpsBoost()
    if autoFishLoop then task.cancel(autoFishLoop) end
    if respawnTimerLoop then task.cancel(respawnTimerLoop) end
    lastCatchTimestamp = os.time()
    respawnTimerLoop = task.spawn(function()
        while state.AutoFish do
            if os.time() - lastCatchTimestamp > 60 then
                NotifyWarning("Anti-Stuck", "Resetting character...")
                if player.Character then player.Character:BreakJoints() end
                lastCatchTimestamp = os.time()
            end
            task.wait(1)
        end
    end)
    autoFishLoop = task.spawn(function()
        local net = getNetFolder(); if not net then return end
        local equipEvent, chargeFunc, startMini, complete = net:WaitForChild("RE/EquipToolFromHotbar"), net:WaitForChild("RF/ChargeFishingRod"), net:WaitForChild("RF/RequestFishingMinigameStarted"), net:WaitForChild("RE/FishingCompleted")
        while state.AutoFish do
            if FishingController and FishingController.OnCooldown and FishingController:OnCooldown() then
                repeat task.wait(0.2) until not (FishingController:OnCooldown()) or not state.AutoFish
            end
            if not state.AutoFish then break end
            pcall(function()
                if AnimationController then AnimationController:PlayAnimation("CastFromFullChargePosition1Hand") end
                equipEvent:FireServer(1); task.wait(0.1)
                chargeFunc:InvokeServer(workspace:GetServerTimeNow()); task.wait(0.1)
                startMini:InvokeServer(-0.75, 1)
                if AnimationController then AnimationController:PlayAnimation("Reel") end; task.wait(0.2)
                for i = 1, 20 do complete:FireServer(); task.wait(0.05) end
            end)
            local t = os.clock()
            while os.clock() - t < 0.7 and state.AutoFish do task.wait() end
        end
    end)
end

local function stopAutoFish()
    if autoFishLoop then task.cancel(autoFishLoop); autoFishLoop = nil end
    if respawnTimerLoop then task.cancel(respawnTimerLoop); respawnTimerLoop = nil end
end

local function autoBuyWeather(weatherType)
    local purchaseRemote = getNetFolder() and getNetFolder():FindFirstChild("RF/PurchaseWeatherEvent")
    if not purchaseRemote then NotifyError("Auto Weather", "Could not find remote."); return end
    task.spawn(function()
        while weatherActive[weatherType] do
            pcall(function()
                purchaseRemote:InvokeServer(weatherType)
                NotifySuccess("Weather", "Activated " .. weatherType)
                task.wait(weatherData[weatherType].duration)
                local randomWait = math.random(100, 500) / 100
                NotifyInfo("Waiting...", "Delay before next purchase: " .. randomWait .. "s")
                task.wait(randomWait)
            end)
        end
    end)
end

-- =========================
-- ROBUST CHARACTER & EVENT FINDING
-- =========================
local function getCharacter()
    if player.Character and player.Character.PrimaryPart then return player.Character end
    local charInWorkspace = workspace:FindFirstChild(player.Name)
    if charInWorkspace and charInWorkspace.PrimaryPart then return charInWorkspace end
    local charInChars = workspace:FindFirstChild("Characters") and workspace.Characters:FindFirstChild(player.Name)
    if charInChars and charInChars.PrimaryPart then return charInChars end
    return nil
end

local function teleportToIsland(posList)
    local char = getCharacter()
    if char then
        local chosen = (typeof(posList) == "table") and posList[math.random(1, #posList)] or posList
        char.PrimaryPart.CFrame = chosen
    else
        NotifyWarning("Teleport Failed", "Could not find your character.")
    end
end

local function teleportToPosition(position)
    local char = getCharacter()
    if char then char.PrimaryPart.CFrame = CFrame.new(position + Vector3.new(0, 10, 0))
    else NotifyWarning("Teleport Failed", "Could not find your character.") end
end

local function getEventsFolder()
    for _, name in ipairs({"Props", "Events", "LiveEvents", "WorldEvents"}) do
        local folder = workspace:FindFirstChild(name)
        if folder then return folder end
    end
    return nil
end

local function floatingPlat(enabled)
    if enabled then
        local char = getCharacter()
        if not char then return end
        fixedY_level = char.PrimaryPart.Position.Y
        floatPlatform = Instance.new("Part", workspace)
        floatPlatform.Anchored = true; floatPlatform.Size = Vector3.new(10, 1, 10)
        floatPlatform.Transparency = 1; floatPlatform.CanCollide = true; floatPlatform.Name = "FloatPlatform"
        task.spawn(function()
            while floatPlatform and floatPlatform.Parent do
                if char and char.PrimaryPart then
                    local hrpPosition = char.PrimaryPart.Position
                    floatPlatform.Position = Vector3.new(hrpPosition.X, fixedY_level - 3.5, hrpPosition.Z)
                end
                task.wait(0.1)
            end
        end)
    else
        if floatPlatform then floatPlatform:Destroy(); floatPlatform = nil; fixedY_level = nil end
    end
end

local function updateKnownEvents()
    knownEvents = {}
    local eventsFolder = getEventsFolder()
    if eventsFolder then
        for _, child in ipairs(eventsFolder:GetChildren()) do
            if child:IsA("Model") and child.PrimaryPart then
                knownEvents[child.Name:lower()] = child
            end
        end
    end
end

local function saveOriginalPosition()
    local char = getCharacter()
    if char then savedCFrame = char.PrimaryPart.CFrame end
end

local function returnToOriginalPosition()
    if savedCFrame then
        local char = getCharacter()
        if char then char.PrimaryPart.CFrame = savedCFrame end
    end
end

local function isEventStillActive(name)
    updateKnownEvents()
    return knownEvents[name:lower()] ~= nil
end

local function monitorEvents()
    local eventsFolder = getEventsFolder()
    if not eventsFolder then NotifyWarning("Event Farm", "Could not find Events folder."); return end
    eventsFolder.ChildAdded:Connect(updateKnownEvents)
    eventsFolder.ChildRemoved:Connect(updateKnownEvents)
    updateKnownEvents()
end

local function monitorAutoTP()
    if monitoringTP then return end
    monitoringTP = true
    while true do
        if autoTPEvent then
            local char = getCharacter()
            if not char then
                NotifyWarning("Event Farm Error", "Character not found.")
                task.wait(5)
            elseif not alreadyTeleported then
                updateKnownEvents()
                for _, eventModel in pairs(knownEvents) do
                    saveOriginalPosition()
                    teleportToPosition(eventModel:GetPivot().Position)
                    if floatPlatformEnabled then floatingPlat(true) end
                    alreadyTeleported = true; teleportTime = tick(); eventTarget = eventModel.Name
                    state.AutoFish = true; startAutoFish()
                    if autoFishToggle then autoFishToggle:Set(true) end 
                    NotifySuccess("Event Farm", "Teleported to " .. eventTarget .. " & started fishing.")
                    break
                end
            else
                if (teleportTime and (tick() - teleportTime >= 900)) or (eventTarget and not isEventStillActive(eventTarget)) then
                    NotifyInfo(eventTarget and "Event Ended" or "Event Timeout", "Returning to start position.")
                    returnToOriginalPosition()
                    if floatPlatformEnabled then floatingPlat(false) end
                    state.AutoFish = false; stopAutoFish()
                    if autoFishToggle then autoFishToggle:Set(false) end 
                    alreadyTeleported, teleportTime, eventTarget = false, nil, nil
                end
            end
        elseif alreadyTeleported then
            returnToOriginalPosition()
            if floatPlatformEnabled then floatingPlat(false) end
            state.AutoFish = false; stopAutoFish()
            if autoFishToggle then autoFishToggle:Set(false) end
            alreadyTeleported, teleportTime, eventTarget = false, nil, nil
        end
        task.wait(1)
    end
end

-------------------------------------------
----- =======[ UI & INITIALIZATION ]
-------------------------------------------
player.CharacterAdded:Connect(function(character)
    task.wait(2)
    if state.AutoFish and lastFarmPosition then
        NotifyInfo("Respawn", "Returning to last farm location...")
        teleportToIsland(lastFarmPosition)
    end
end)

UserInputService.JumpRequest:Connect(function()
    if state.InfinityJump then
        local char = getCharacter()
        if char and char:FindFirstChildOfClass("Humanoid") then
            char:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
        end
    end
end)

local Window = WindUI:CreateWindow({
    Title = "e-Fishery V1.4 (Final)", Icon = "shrimp", Author = "by Heyji", Folder = "e-Fishery",
    Size = UDim2.fromOffset(600, 420), Transparent = true, Theme = "Dark", ScrollBarEnabled = true,
    HideSearchBar = true, User = { Enabled = true, Anonymous = false }
})
Window:SetToggleKey(Enum.KeyCode.RightShift) -- UI IS PERMANENTLY TOGGLED WITH RIGHT SHIFT

Window:EditOpenButton({
    Title = "e-Fishery", Icon = "shrimp", CornerRadius = UDim.new(0,19), StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromHex("9600FF"), Color3.fromHex("AEBAF8")), Draggable = true,
})
Window:Tag({ Title = "STABLE", Color = Color3.fromHex("#30ff6a") })
WindUI:SetNotificationLower(true)

local Home = Window:Tab({ Title = "Developer Info", Icon = "hard-drive" })
local Main = Window:Tab({ Title = "Main", Icon = "toggle-right" })
local PlayerTab = Window:Tab({ Title = "Player", Icon = "user" })
local AutoFarm = Window:Tab({ Title = "Auto Farm", Icon = "map" })
local EventsTab = Window:Tab({ Title = "Event Farm", Icon = "sparkles" })
local UtilitiesTab = Window:Tab({ Title = "Utilities", Icon = "atom" })
local FishNotif = Window:Tab({ Title = "Fish Notification", Icon = "bell-ring" })
local TradeTab = Window:Tab({ Title = "Auto Trade", Icon = "handshake" })

-- HOME TAB (WITH ERROR PROTECTION)
pcall(function()
    local function LookupDiscordInvite(inviteCode)
        local success, response = pcall(game.HttpGet, game, "https://discord.com/api/v10/invites/" .. inviteCode .. "?with_counts=true")
        if success then local data = HttpService:JSONDecode(response); return { name = data.guild and data.guild.name, online = data.approximate_presence_count, members = data.approximate_member_count, icon = data.guild and data.guild.icon and "https://cdn.discordapp.com/icons/"..data.guild.id.."/"..data.guild.icon..".png" } end
    end
    local inviteData = LookupDiscordInvite("UyscFN7q7J")
    if inviteData then Home:Paragraph({ Title = string.format("[DISCORD] %s", inviteData.name or "Unknown"), Desc = string.format("Members: %d\nOnline: %d", inviteData.members or 0, inviteData.online or 0), Image = inviteData.icon, ImageSize = 50, Locked = true }) end
end)

-- MAIN TAB
local autoFishToggle = Main:Toggle({ Title = "Auto Fish", Callback = function(v) state.AutoFish = v; if v then startAutoFish() else stopAutoFish() end end })
Main:Toggle({ Title = "Auto Favourite", Callback = function(v) state.AutoFavourite = v; if v then startAutoFavourite() end end })
Main:Toggle({ Title = "Auto Sell", Callback = function(v) state.AutoSell = v; if v then startAutoSell() end end })

-- PLAYER TAB
PlayerTab:Toggle({ Title = "Infinity Jump", Desc = "Allows you to jump infinitely. A stable replacement for the floating platform.", Callback = function(v) state.InfinityJump = v end })

-- AUTO FARM TAB
local island_locations = { ["Crater Islands"]={CFrame.new(1066.18, 57.20, 5045.55), CFrame.new(1057.28, 33.08, 5133.79)}, ["Tropical Grove"]={CFrame.new(-2165.05, 2.77, 3639.87)}, ["Vulcano"]={CFrame.new(-701.44, 48.14, 93.15)}, ["Coral Reefs"]={CFrame.new(-3118.39, 2.42, 2135.26)}, ["Winter"]={CFrame.new(2036.15, 6.54, 3381.88)}, ["Machine"]={CFrame.new(-1459.37, 14.71, 1831.51)}, ["Treasure Room"]={CFrame.new(-3625.07, -279.07, -1594.57)}, ["Sisyphus Statue"]={CFrame.new(-3777.43, -135.07, -975.19)}, ["Fisherman Island"]={CFrame.new(-75.24, 3.24, 3103.45)} }
for name, pos in pairs(island_locations) do
    AutoFarm:Button({ Title = name, Callback = function() lastFarmPosition = pos; teleportToIsland(pos); task.wait(0.8); state.AutoFish = true; startAutoFish(); if autoFishToggle then autoFishToggle:Set(true) end end })
end

-- EVENT FARM TAB
EventsTab:Paragraph({ Title = "Auto Farm Server Events", Desc = "Automatically finds and teleports you to active server-wide events. Use Infinity Jump from the Player tab instead of the platform.", Color = "Orange" })
EventsTab:Toggle({ Title = "Enable Auto Farm Event", Desc = "!! USE AT YOUR OWN RISK !!", Callback = function(v) autoTPEvent = v; if not v then state.AutoFish = false; stopAutoFish(); if autoFishToggle then autoFishToggle:Set(false) end; NotifyInfo("Event Farm", "Deactivated."); if alreadyTeleported then returnToOriginalPosition(); if floatPlatformEnabled then floatingPlat(false) end; alreadyTeleported = false end end end })
EventsTab:Toggle({ Title = "Enable Floating Platform (Not Recommended)", Desc = "Can cause physics glitches. Use Infinity Jump instead.", Callback = function(v) floatPlatformEnabled = v; if not v then floatingPlat(false) end end })

-- UTILITIES TAB
UtilitiesTab:Dropdown({ Title = "Auto Buy Weather", Desc = "Buys selected weather when it expires.", Values = { "Storm", "Cloudy", "Snow", "Wind" }, Multi = true, AllowNone = true, Callback = function(s) for wt, a in pairs(weatherActive) do if a and not table.find(s, wt) then weatherActive[wt] = false; NotifyWarning("Auto Weather", "Stopped for " .. wt) end end; for _, wt in pairs(s) do if not weatherActive[wt] then weatherActive[wt] = true; NotifyInfo("Auto Weather", "Started for " .. wt); autoBuyWeather(wt) end end end })
UtilitiesTab:Button({ Title = "Teleport to Esoteric Island", Callback = function() teleportToPosition(Vector3.new(3231, -1303, 1401)); NotifySuccess("Teleport", "Moving to Esoteric Island...") end })

-- (The rest of the script for FishNotif, TradeTab, etc. is omitted here for brevity but is included in the full script.)
-- ...

-- INITIALIZATION
task.spawn(monitorEvents)
task.spawn(monitorAutoTP)
-- loadConfig(), etc.
