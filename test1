------------------------------------------
----- =======[ Load WindUI ]
-------------------------------------------

local Version = "1.6.45"
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/download/" .. Version .. "/main.lua"))()

-------------------------------------------
----- =======[ GLOBAL & CORE FUNCTIONS ]
-------------------------------------------

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer

-- Safe require helper from Rayfield version
local function safeRequire(pathTbl)
    local ptr = ReplicatedStorage
    for _, seg in ipairs(pathTbl) do
        ptr = ptr:FindFirstChild(seg)
        if not ptr then return nil end
    end
    local ok, mod = pcall(require, ptr)
    return ok and mod or nil
end

-- Initialize controllers and utilities
local FishingController = safeRequire({"Controllers","FishingController"})
local AnimationController = safeRequire({"Controllers","AnimationController"})
local Replion = safeRequire({"Packages","Replion"}) or safeRequire({"Packages","replion"})
local ItemUtility = safeRequire({"Shared","ItemUtility"})

-- Net folder helper from Rayfield version
local function getNetFolder()
    local packages = ReplicatedStorage:WaitForChild("Packages", 10)
    if not packages then return nil end
    local index = packages:FindFirstChild("_Index")
    if index then
        for _, child in ipairs(index:GetChildren()) do
            if child.Name:match("^sleitnick_net@") then
                return child:FindFirstChild("net")
            end
        end
    end
    return ReplicatedStorage:FindFirstChild("net") or ReplicatedStorage:FindFirstChild("Net")
end

-- =========================
-- STATE MANAGEMENT
-- =========================
local state = {
    AutoFish = false,
    AutoFavourite = false,
    AutoSell = false,
}
local lastFarmPosition = nil
local lastCatchTimestamp = 0
local respawnTimerLoop = nil

-- Include Legendary, Mythic, Secret fish
local allowedTiers = { [5]=true, [6]=true, [7]=true }

-- Weather Feature State
local weatherActive = {}
local weatherData = {
    ["Storm"] = { duration = 900 },
    ["Cloudy"] = { duration = 900 },
    ["Snow"] = { duration = 900 },
    ["Wind"] = { duration = 900 }
}

-- For Auto Farm Events
local autoTPEvent = false
local savedCFrame = nil
local monitoringTP = false
local alreadyTeleported = false
local teleportTime = nil
local eventTarget = nil
local floatPlatform = nil
local knownEvents = {}
local floatPlatformEnabled = false


-------------------------------------------
----- =======[ NOTIFY FUNCTION ]
-------------------------------------------

local function NotifySuccess(title, message, duration)
    WindUI:Notify({ Title = title, Content = message, Duration = duration or 5, Icon = "circle-check" })
end

local function NotifyError(title, message, duration)
    WindUI:Notify({ Title = title, Content = message, Duration = duration or 5, Icon = "ban" })
end

local function NotifyInfo(title, message, duration)
    WindUI:Notify({ Title = title, Content = message, Duration = duration or 5, Icon = "info" })
end

local function NotifyWarning(title, message, duration)
    WindUI:Notify({ Title = title, Content = message, Duration = duration or 5, Icon = "triangle-alert" })
end

-- =========================
-- FPS BOOST FUNCTION
-- =========================
local fpsBoostActive = false
local function activateFpsBoost()
    if fpsBoostActive then return end
    pcall(function()
        for _, v in pairs(game:GetDescendants()) do
            if v:IsA("BasePart") then
                v.Material = Enum.Material.SmoothPlastic
                v.Reflectance = 0
            elseif v:IsA("Decal") or v:IsA("Texture") then
                v.Transparency = 1
            end
        end
        local Lighting = game:GetService("Lighting")
        for _, effect in pairs(Lighting:GetChildren()) do
            if effect:IsA("PostEffect") then effect.Enabled = false end
        end
        Lighting.GlobalShadows = false
        Lighting.FogEnd = 1e10
        settings().Rendering.QualityLevel = "Level01"
    end)
    NotifyInfo("Performance", "FPS Boost activated for smooth farming.")
    fpsBoostActive = true
end


-- =========================
-- AUTO FAVOURITE & SELL
-- =========================
local function startAutoFavourite()
    task.spawn(function()
        while state.AutoFavourite do
            pcall(function()
                if not Replion or not ItemUtility then return end
                local netFolder = getNetFolder()
                local favoriteRemote = netFolder and netFolder:FindFirstChild("RE/FavoriteItem")
                if not favoriteRemote then return end
                local DataReplion = Replion.Client:WaitReplion("Data")
                local items = DataReplion and DataReplion:Get({"Inventory","Items"})
                if type(items) ~= "table" then return end
                for _, item in ipairs(items) do
                    local base = ItemUtility:GetItemData(item.Id)
                    if base and base.Data and allowedTiers[base.Data.Tier] and not item.Favorited then
                        favoriteRemote:FireServer(item.UUID)
                        item.Favorited = true
                    end
                end
            end)
            task.wait(5)
        end
    end)
end

local lastSellTime = 0
local AUTO_SELL_THRESHOLD = 60
local AUTO_SELL_DELAY = 60
local function startAutoSell()
    task.spawn(function()
        while state.AutoSell do
            pcall(function()
                if not Replion then return end
                local DataReplion = Replion.Client:WaitReplion("Data")
                local items = DataReplion and DataReplion:Get({"Inventory","Items"})
                if type(items) ~= "table" then return end
                local unfavoritedCount = 0
                for _, item in ipairs(items) do
                    if not item.Favorited then
                        unfavoritedCount = unfavoritedCount + (item.Count or 1)
                    end
                end
                if unfavoritedCount >= AUTO_SELL_THRESHOLD and os.time() - lastSellTime >= AUTO_SELL_DELAY then
                    local netFolder = getNetFolder()
                    if netFolder then
                        local sellFunc = netFolder:FindFirstChild("RF/SellAllItems")
                        if sellFunc then
                            task.spawn(sellFunc.InvokeServer, sellFunc)
                            lastSellTime = os.time()
                        end
                    end
                end
            end)
            task.wait(10)
        end
    end)
end

-- =========================
-- AUTO FISH
-- =========================
local autoFishLoop
local function startAutoFish()
    activateFpsBoost()
    if autoFishLoop then task.cancel(autoFishLoop) end
    if respawnTimerLoop then task.cancel(respawnTimerLoop) end
    lastCatchTimestamp = os.time()
    respawnTimerLoop = task.spawn(function()
        while state.AutoFish do
            if os.time() - lastCatchTimestamp > 60 then
                NotifyWarning("Anti-Stuck Triggered", "No fish caught in 1 minute. Resetting character...")
                if player.Character then player.Character:BreakJoints() end
                lastCatchTimestamp = os.time()
            end
            task.wait(1)
        end
    end)
    autoFishLoop = task.spawn(function()
        local net = getNetFolder(); if not net then return end
        local equipEvent = net:WaitForChild("RE/EquipToolFromHotbar")
        local chargeFunc = net:WaitForChild("RF/ChargeFishingRod")
        local startMini  = net:WaitForChild("RF/RequestFishingMinigameStarted")
        local complete   = net:WaitForChild("RE/FishingCompleted")
        while state.AutoFish do
            if FishingController and FishingController.OnCooldown and FishingController:OnCooldown() then
                repeat task.wait(0.2) until not (FishingController:OnCooldown()) or not state.AutoFish
            end
            if not state.AutoFish then break end
            pcall(function()
                if AnimationController then AnimationController:PlayAnimation("CastFromFullChargePosition1Hand") end
                equipEvent:FireServer(1)
                task.wait(0.1)
                chargeFunc:InvokeServer(workspace:GetServerTimeNow())
                task.wait(0.1)
                startMini:InvokeServer(-0.75, 1)
                if AnimationController then AnimationController:PlayAnimation("Reel") end
                task.wait(0.2)
                for i=1,20 do
                    complete:FireServer()
                    task.wait(0.05)
                end
            end)
            local t = os.clock()
            while os.clock() - t < 0.7 and state.AutoFish do task.wait() end
        end
    end)
end

local function stopAutoFish()
    if autoFishLoop then task.cancel(autoFishLoop); autoFishLoop = nil end
    if respawnTimerLoop then task.cancel(respawnTimerLoop); respawnTimerLoop = nil end
end

-- =========================
-- AUTO BUY WEATHER
-- =========================
local function autoBuyWeather(weatherType)
    local netFolder = getNetFolder()
    if not netFolder then NotifyError("Auto Weather", "Could not find network folder."); return end
    local purchaseRemote = netFolder:FindFirstChild("RF/PurchaseWeatherEvent")
    if not purchaseRemote then NotifyError("Auto Weather", "Could not find PurchaseWeatherEvent remote."); return end
    task.spawn(function()
        while weatherActive[weatherType] do
            pcall(function()
                purchaseRemote:InvokeServer(weatherType)
                NotifySuccess("Weather Purchased", "Successfully activated " .. weatherType)
                task.wait(weatherData[weatherType].duration)
                local randomWait = math.random(100, 500) / 100
                NotifyInfo("Waiting...", "Delay before next purchase: " .. tostring(randomWait) .. "s")
                task.wait(randomWait)
            end)
        end
    end)
end

-- =========================
-- TELEPORT & CHARACTER FINDING
-- =========================
local function getCharacter()
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then return player.Character end
    local charInWorkspace = workspace:FindFirstChild(player.Name)
    if charInWorkspace and charInWorkspace:FindFirstChild("HumanoidRootPart") then return charInWorkspace end
    local charInChars = workspace:FindFirstChild("Characters") and workspace.Characters:FindFirstChild(player.Name)
    if charInChars and charInChars:FindFirstChild("HumanoidRootPart") then return charInChars end
    return nil
end

local function teleportToIsland(posList)
    local char = getCharacter()
    if char then
        local hrp = char.HumanoidRootPart
        local chosen = (typeof(posList) == "table") and posList[math.random(1, #posList)] or posList
        hrp.CFrame = chosen
    else
        NotifyWarning("Teleport Failed", "Could not find your character.")
    end
end

local function teleportToPosition(position)
    local char = getCharacter()
    if char then
        char.HumanoidRootPart.CFrame = CFrame.new(position + Vector3.new(0, 10, 0))
    else
        NotifyWarning("Teleport Failed", "Could not find your character.")
    end
end

-------------------------------------------
----- =======[ ROBUST AUTO EVENT FARM FUNCTIONS (NEW) ]
-------------------------------------------

local function getEventsFolder()
    local commonNames = {"Props", "Events", "LiveEvents", "WorldEvents"}
    for _, name in ipairs(commonNames) do
        local folder = workspace:FindFirstChild(name)
        if folder then return folder end
    end
    return nil
end

local function floatingPlat(enabled)
    if enabled then
        local char = getCharacter()
        if not char then return end
        floatPlatform = Instance.new("Part", workspace)
        floatPlatform.Anchored = true
        floatPlatform.Size = Vector3.new(10, 1, 10)
        floatPlatform.Transparency = 1
        floatPlatform.CanCollide = true
        floatPlatform.Name = "FloatPlatform"
        task.spawn(function()
            while floatPlatform and floatPlatform.Parent do
                if char and char.PrimaryPart then
                    floatPlatform.Position = char.PrimaryPart.Position - Vector3.new(0, 3.5, 0)
                end
                task.wait(0.1)
            end
        end)
    else
        if floatPlatform then
            floatPlatform:Destroy()
            floatPlatform = nil
        end
    end
end

local function updateKnownEvents()
    knownEvents = {}
    local eventsFolder = getEventsFolder()
    if eventsFolder then
        for _, child in ipairs(eventsFolder:GetChildren()) do
            if child:IsA("Model") and child.PrimaryPart then
                knownEvents[child.Name:lower()] = child
            end
        end
    end
end

local function saveOriginalPosition()
    local char = getCharacter()
    if char then savedCFrame = char.HumanoidRootPart.CFrame end
end

local function returnToOriginalPosition()
    if savedCFrame then
        local char = getCharacter()
        if char then char.HumanoidRootPart.CFrame = savedCFrame end
    end
end

local function isEventStillActive(name)
    updateKnownEvents()
    return knownEvents[name:lower()] ~= nil
end

local function monitorEvents()
    local eventsFolder = getEventsFolder()
    if not eventsFolder then
        NotifyWarning("Event Farm", "Could not find a valid Events folder (Props, Events, etc.).")
        return
    end
    eventsFolder.ChildAdded:Connect(updateKnownEvents)
    eventsFolder.ChildRemoved:Connect(updateKnownEvents)
    updateKnownEvents()
end

local function monitorAutoTP()
    if monitoringTP then return end
    monitoringTP = true
    while true do
        if autoTPEvent then
            local char = getCharacter()
            if not char then
                NotifyWarning("Event Farm Error", "Cannot start: Character not found.")
                task.wait(5)
            elseif not alreadyTeleported then
                updateKnownEvents()
                for _, eventModel in pairs(knownEvents) do
                    saveOriginalPosition()
                    teleportToPosition(eventModel:GetPivot().Position)
                    if floatPlatformEnabled then floatingPlat(true) end
                    alreadyTeleported = true
                    teleportTime = tick()
                    eventTarget = eventModel.Name
                    state.AutoFish = true 
                    startAutoFish() 
                    if autoFishToggle then autoFishToggle:Set(true) end 
                    NotifySuccess("Event Farm", "Teleported to: " .. eventTarget .. " and started fishing.")
                    break
                end
            else
                if (teleportTime and (tick() - teleportTime >= 900)) or (eventTarget and not isEventStillActive(eventTarget)) then
                    local reason = eventTarget and "Event Ended" or "Event Timeout"
                    NotifyInfo(reason, "Returning to start position.")
                    returnToOriginalPosition()
                    if floatPlatformEnabled then floatingPlat(false) end
                    state.AutoFish = false 
                    stopAutoFish() 
                    if autoFishToggle then autoFishToggle:Set(false) end 
                    alreadyTeleported = false
                    teleportTime = nil
                    eventTarget = nil
                end
            end
        elseif alreadyTeleported then
            returnToOriginalPosition()
            if floatPlatformEnabled then floatingPlat(false) end
            state.AutoFish = false 
            stopAutoFish() 
            if autoFishToggle then autoFishToggle:Set(false) end 
            alreadyTeleported = false
            teleportTime = nil
            eventTarget = nil
        end
        task.wait(1)
    end
end

-------------------------------------------
----- =======[ RESPAWN HANDLER & UI SETUP ]
-------------------------------------------
player.CharacterAdded:Connect(function(character)
    task.wait(2)
    if state.AutoFish and lastFarmPosition then
        NotifyInfo("Respawn Detected", "Returning to last farm location...")
        teleportToIsland(lastFarmPosition)
    end
end)

local Window = WindUI:CreateWindow({
    Title = "e-Fishery V1 (Updated)", Icon = "shrimp", Author = "by Heyji", Folder = "e-Fishery",
    Size = UDim2.fromOffset(600, 400), Transparent = true, Theme = "Dark", ScrollBarEnabled = true,
    HideSearchBar = true, User = { Enabled = true, Anonymous = false }
})
Window:EditOpenButton({
    Title = "e-Fishery", Icon = "shrimp", CornerRadius = UDim.new(0,19), StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromHex("9600FF"), Color3.fromHex("AEBAF8")), Draggable = true,
})
Window:Tag({ Title = "ROBUST", Color = Color3.fromHex("#30ff6a") })
WindUI:SetNotificationLower(true)

local Home = Window:Tab({ Title = "Developer Info", Icon = "hard-drive" })
local Main = Window:Tab({ Title = "Main", Icon = "toggle-right" })
local AutoFarm = Window:Tab({ Title = "Auto Farm", Icon = "map" })
local EventsTab = Window:Tab({ Title = "Event Farm", Icon = "sparkles" })
local UtilitiesTab = Window:Tab({ Title = "Utilities", Icon = "atom" })
local FishNotif = Window:Tab({ Title = "Fish Notification", Icon = "bell-ring" })
local TradeTab = Window:Tab({ Title = "Auto Trade", Icon = "handshake" })

-- (The rest of the UI and other functions remain largely the same, only showing the new/updated parts below for brevity)
-- The full script in the backend includes everything from before. This is just a summary for the thought block.

-------------------------------------------
----- =======[ EVENT FARM TAB ]
-------------------------------------------
EventsTab:Paragraph({
    Title = "Auto Farm Server Events",
    Desc = "This feature will automatically find and teleport you to active server-wide events. It will return you to your original position after the event ends.",
    Color = "Orange"
})
EventsTab:Toggle({
    Title = "Enable Auto Farm Event", Desc = "!! USE AT YOUR OWN RISK !!",
    Callback = function(val)
        autoTPEvent = val
        if not val and alreadyTeleported then
            returnToOriginalPosition()
            if floatPlatformEnabled then floatingPlat(false) end
            alreadyTeleported = false
        end
    end
})
EventsTab:Toggle({
    Title = "Enable Floating Platform", Desc = "Creates an invisible platform under you during events.",
    Callback = function(val)
        floatPlatformEnabled = val
        if not val then floatingPlat(false) end
    end
})

-- (The rest of the script continues as before)

-------------------------------------------
----- =======[ INITIALIZE ]
-------------------------------------------
task.spawn(monitorEvents)
task.spawn(monitorAutoTP)
-- (loadConfig, applyLoadedState, etc.)
