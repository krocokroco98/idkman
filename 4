------------------------------------------
----- =======[ Load WindUI ]
-------------------------------------------

-- This is the corrected, permanent link that will not give a 404 error.
local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()

-------------------------------------------
----- =======[ GLOBAL & CORE FUNCTIONS ]
-------------------------------------------

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer

-- Safe require helper
local function safeRequire(pathTbl)
    local ptr = ReplicatedStorage
    for _, seg in ipairs(pathTbl) do
        ptr = ptr:FindFirstChild(seg)
        if not ptr then return nil end
    end
    local ok, mod = pcall(require, ptr)
    return ok and mod or nil
end

-- Initialize controllers and utilities
local FishingController = safeRequire({"Controllers","FishingController"})
local AnimationController = safeRequire({"Controllers","AnimationController"})
local Replion = safeRequire({"Packages","Replion"}) or safeRequire({"Packages","replion"})
local ItemUtility = safeRequire({"Shared","ItemUtility"})

-- Net folder helper
local function getNetFolder()
    local packages = ReplicatedStorage:WaitForChild("Packages", 10)
    if not packages then return nil end
    local index = packages:FindFirstChild("_Index")
    if index then
        for _, child in ipairs(index:GetChildren()) do
            if child.Name:match("^sleitnick_net@") then
                return child:FindFirstChild("net")
            end
        end
    end
    return ReplicatedStorage:FindFirstChild("net") or ReplicatedStorage:FindFirstChild("Net")
end

-- =========================
-- STATE MANAGEMENT
-- =========================
local state = {
    AutoFish = false,
}
local lastFarmPosition = nil
local lastCatchTimestamp = 0
local respawnTimerLoop = nil

-- State for the Auto Event feature
local eventTPState = { enabled = false, selectedEvent = nil, originalPosition = nil, platform = nil, wasAutoFishing = false, isAtEvent = false }

-------------------------------------------
----- =======[ NOTIFY FUNCTION ]
-------------------------------------------

local function NotifyInfo(title, message, duration)
    if WindUI and WindUI.Notify then
        WindUI:Notify({ Title = title, Content = message, Duration = duration or 5, Icon = "info" })
    end
end

local function NotifyWarning(title, message, duration)
    if WindUI and WindUI.Notify then
        WindUI:Notify({ Title = title, Content = message, Duration = duration or 5, Icon = "triangle-alert" })
    end
end

-- =========================
-- MAIN FEATURES
-- =========================

-- AUTO FISH
local autoFishLoop
local function stopAutoFish()
    if autoFishLoop then task.cancel(autoFishLoop); autoFishLoop = nil end
    if respawnTimerLoop then task.cancel(respawnTimerLoop); respawnTimerLoop = nil end
end

local function startAutoFish()
    if autoFishLoop then task.cancel(autoFishLoop) end
    if respawnTimerLoop then task.cancel(respawnTimerLoop) end
    lastCatchTimestamp = os.time()
    respawnTimerLoop = task.spawn(function()
        while state.AutoFish do
            if os.time() - lastCatchTimestamp > 60 then
                NotifyWarning("Anti-Stuck Triggered", "No fish caught in 1 minute. Resetting character...")
                if player.Character then
                    player.Character:BreakJoints()
                end
                lastCatchTimestamp = os.time()
            end
            task.wait(1)
        end
    end)
    autoFishLoop = task.spawn(function()
        local net = getNetFolder(); if not net then return end
        local equipEvent = net:WaitForChild("RE/EquipToolFromHotbar")
        local chargeFunc = net:WaitForChild("RF/ChargeFishingRod")
        local startMini  = net:WaitForChild("RF/RequestFishingMinigameStarted")
        local complete   = net:WaitForChild("RE/FishingCompleted")
        while state.AutoFish do
            pcall(function()
                equipEvent:FireServer(1)
                task.wait(0.1)
                chargeFunc:InvokeServer(workspace:GetServerTimeNow())
                task.wait(0.1)
                startMini:InvokeServer(-0.75, 1)
                task.wait(0.2)
                for i=1,20 do
                    complete:FireServer()
                    task.wait(0.05)
                end
            end)
            local t = os.clock()
            while os.clock() - t < 0.7 and state.AutoFish do task.wait() end
        end
    end)
end

-- TELEPORT
local function teleportTo(posList)
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart") or char:WaitForChild("HumanoidRootPart")
    if hrp then
        local chosen = (typeof(posList) == "table") and posList[math.random(1, #posList)] or posList
        hrp.CFrame = chosen
    end
end

-------------------------------------------
----- =======[ RESPAWN HANDLER ]
-------------------------------------------
player.CharacterAdded:Connect(function(character)
    task.wait(2)
    if state.AutoFish and lastFarmPosition then
        NotifyInfo("Respawn Detected", "Returning to last farm location...")
        teleportTo(lastFarmPosition)
    end
end)

-------------------------------------------
----- =======[ LOAD WINDOW ]
-------------------------------------------
local Window = WindUI:CreateWindow({
    Title = "e-Fishery V1.2 (Fixed)", Icon = "shrimp", Author = "by Heyji", Folder = "e-Fishery",
    Size = UDim2.fromOffset(600, 400), Transparent = true, Theme = "Dark", KeySystem = false
})

-------------------------------------------
----- =======[ ALL TABS ]
-------------------------------------------
local Main = Window:Tab({ Title = "Main", Icon = "toggle-right" })
local AutoFarm = Window:Tab({ Title = "Auto Farm", Icon = "map" })
local EventsTab = Window:Tab({ Title = "Events", Icon = "radio-tower" })

-------------------------------------------
----- =======[ MAIN TAB ]
-------------------------------------------
local autoFishToggle
autoFishToggle = Main:Toggle({ Title = "Auto Fish", Callback = function(Value)
    state.AutoFish = Value
    if Value then startAutoFish() else stopAutoFish() end
end })

-------------------------------------------
----- =======[ AUTO FARM TAB ]
-------------------------------------------
local island_locations = {
    ["Crater Islands"] = { CFrame.new(1066, 57, 5045) },
    ["Tropical Grove"] = { CFrame.new(-2165, 3, 3639) },
    ["Vulcano"] = { CFrame.new(-701, 48, 93) },
    ["Coral Reefs"] = { CFrame.new(-3118, 2, 2135) },
    ["Winter"] = { CFrame.new(2036, 7, 3381) },
    ["Machine"] = { CFrame.new(-1459, 15, 1831) },
    ["Treasure Room"] = { CFrame.new(-3625, -279, -1594) },
    ["Sisyphus Statue"] = { CFrame.new(-3777, -135, -975) },
    ["Fisherman Island"] = { CFrame.new(-75, 3, 3103) },
}
for name, pos in pairs(island_locations) do
    AutoFarm:Button({ Title = name, Callback = function()
        lastFarmPosition = pos; teleportTo(pos); task.wait(0.8)
        if autoFishToggle then autoFishToggle:Set(true) end
    end })
end

-------------------------------------------
----- =======[ EVENTS TAB ]
-------------------------------------------
local eventNames = {"Ghost Worm", "Worm Hunt", "Shark Hunt", "Ghost Shark Hunt", "Shocked", "Black Hole", "Meteor Rain"}

-- THIS IS THE CORRECTED FUNCTION
local function findEventPart(eventName)
    local menuRings = workspace:FindFirstChild("!!! MENU RINGS")
    if not menuRings then return nil end
    
    local propsFolder = menuRings:FindFirstChild("Props")
    if not propsFolder then return nil end

    local eventNameLower = eventName:lower()
    for _, descendant in ipairs(propsFolder:GetDescendants()) do
        if descendant.Name == "DisplayName" and descendant:IsA("TextLabel") then
            if descendant.Text:lower() == eventNameLower then
                local currentAncestor = descendant
                while currentAncestor and currentAncestor ~= propsFolder do
                    if currentAncestor:IsA("BasePart") then return currentAncestor end
                    currentAncestor = currentAncestor.Parent
                end
            end
        end
    end
    return nil
end

EventsTab:Dropdown({
    Title = "Select Event",
    Values = eventNames,
    AllowNone = true,
    Callback = function(value)
        eventTPState.selectedEvent = value
    end
})

EventsTab:Toggle({
    Title = "Enable Auto TP to Event",
    Desc = "Automatically teleports you to the selected event when it appears.",
    Callback = function(value)
        eventTPState.enabled = value
        if not value and eventTPState.isAtEvent then
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and eventTPState.originalPosition then
                player.Character.HumanoidRootPart.CFrame = eventTPState.originalPosition
            end
            if eventTPState.platform then eventTPState.platform:Destroy() end
            eventTPState.platform = nil
            eventTPState.isAtEvent = false
            NotifyInfo("Auto Event", "Disabled and returned to original position.")
        end
    end
})

task.spawn(function()
    while task.wait(5) do
        if eventTPState.enabled and eventTPState.selectedEvent and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = player.Character.HumanoidRootPart
            local eventPart = findEventPart(eventTPState.selectedEvent)

            if eventPart and not eventTPState.isAtEvent then
                NotifyInfo("Event Found", "Teleporting to " .. eventTPState.selectedEvent)
                eventTPState.isAtEvent = true
                eventTPState.wasAutoFishing = state.AutoFish
                eventTPState.originalPosition = hrp.CFrame
                
                if eventTPState.wasAutoFishing then autoFishToggle:Set(false) end
                
                eventTPState.platform = Instance.new("Part", workspace)
                eventTPState.platform.Name = "EventPlatform"
                eventTPState.platform.Size = Vector3.new(30, 1, 30)
                eventTPState.platform.Position = eventPart.Position + Vector3.new(0, 50, 0)
                eventTPState.platform.Anchored = true
                eventTPState.platform.CanCollide = true
                eventTPState.platform.Transparency = 0.5
                eventTPState.platform.BrickColor = BrickColor.new("Magenta")

                hrp.CFrame = eventTPState.platform.CFrame * CFrame.new(0, 3, 0)
                
                if eventTPState.wasAutoFishing then autoFishToggle:Set(true) end

            elseif not eventPart and eventTPState.isAtEvent then
                NotifyInfo("Event Ended", "Returning to original position...")
                if eventTPState.wasAutoFishing then autoFishToggle:Set(false) end
                if eventTPState.platform then eventTPState.platform:Destroy(); eventTPState.platform = nil end
                
                hrp.CFrame = eventTPState.originalPosition
                
                if eventTPState.wasAutoFishing then task.wait(1); autoFishToggle:Set(true) end
                eventTPState.isAtEvent = false
            end
        end
    end
end)
