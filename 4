-- Standalone Auto Event Teleport Script
local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()
if not WindUI then 
    warn("Could not load the UI library.")
    return 
end

local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- State management for the feature
local eventTPState = { 
    enabled = false, 
    selectedEvent = nil, 
    originalPosition = nil, 
    isAtEvent = false 
}

-- Create the UI
local Window = WindUI:CreateWindow({Title = "Auto Event Teleport", Size = UDim2.fromOffset(350, 200), Author = "For You"})
local Tab = Window:Tab({Title = "Main"})
local statusLabel = Tab:Paragraph({Title = "Status", Desc = "Waiting..."})

-- The updated list of events
local eventNames = {"Ghost Worm", "Worm Hunt", "Shark Hunt", "Ghost Shark Hunt", "Megalodon Hunt"}

Tab:Dropdown({
    Title = "Select Event",
    Values = eventNames,
    AllowNone = true,
    Callback = function(value)
        eventTPState.selectedEvent = value
        statusLabel:SetDesc("Selected event: " .. (value or "None"))
    end
})

Tab:Toggle({
    Title = "Enable Auto TP to Event",
    Value = false,
    Callback = function(value)
        eventTPState.enabled = value
        if value then
            statusLabel:SetDesc("Enabled. Searching for '" .. (eventTPState.selectedEvent or "N/A") .. "'...")
        else
            statusLabel:SetDesc("Disabled.")
            -- If we were at an event and disabled it, return the player
            if eventTPState.isAtEvent and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and eventTPState.originalPosition then
                player.Character.HumanoidRootPart.CFrame = eventTPState.originalPosition
                eventTPState.isAtEvent = false
            end
        end
    end
})

-- The corrected function to find the event part
local function findEventPart(eventName)
    local menuRingsFolder = workspace:FindFirstChild("!!! MENU RINGS")
    if not menuRingsFolder then return nil end
    
    local propsFolder = menuRingsFolder:FindFirstChild("Props")
    if not propsFolder then return nil end

    local eventNameLower = eventName:lower()

    for _, descendant in ipairs(propsFolder:GetDescendants()) do
        if descendant.Name == "DisplayName" and descendant:IsA("TextLabel") then
            if descendant.Text:lower() == eventNameLower then
                local currentAncestor = descendant
                while currentAncestor and currentAncestor ~= propsFolder do
                    if currentAncestor:IsA("Model") and currentAncestor:FindFirstChild("Hitbox") and currentAncestor.Hitbox:IsA("BasePart") then
                        return currentAncestor.Hitbox
                    elseif currentAncestor:IsA("BasePart") then
                        return currentAncestor
                    end
                    currentAncestor = currentAncestor.Parent
                end
            end
        end
    end
    return nil
end

-- Main loop to check for events
task.spawn(function()
    while task.wait(5) do
        if not eventTPState.enabled or not eventTPState.selectedEvent or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            continue
        end

        local hrp = player.Character.HumanoidRootPart
        local eventPart = findEventPart(eventTPState.selectedEvent)

        -- Teleport TO the event
        if eventPart and not eventTPState.isAtEvent then
            statusLabel:SetDesc("Event found! Teleporting...")
            eventTPState.isAtEvent = true
            eventTPState.originalPosition = hrp.CFrame
            hrp.CFrame = eventPart.CFrame + Vector3.new(0, 5, 0)
            
        -- Teleport BACK from the event when it's gone
        elseif not eventPart and eventTPState.isAtEvent then
            statusLabel:SetDesc("Event ended. Returning to original position...")
            if eventTPState.originalPosition then
                hrp.CFrame = eventTPState.originalPosition
            end
            eventTPState.isAtEvent = false
            statusLabel:SetDesc("Enabled. Searching for '" .. (eventTPState.selectedEvent or "N/A") .. "'...")
        end
    end
end)
