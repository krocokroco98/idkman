return function(gameStatusData)
    local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()
    if not WindUI then return end

    local HttpService = game:GetService("HttpService")
    local Players = game:GetService("Players")
    local replicatedStorage = game:GetService("ReplicatedStorage")
    local TweenService = game:GetService("TweenService")
    local Lighting = game:GetService("Lighting")
    local MarketplaceService = game:GetService("MarketplaceService")
    local RunService = game:GetService("RunService")
    local player = Players.LocalPlayer
    local startTime = os.time()
    
    local introScreenGui, introBlur, introFrame, introBg, introGlowFrame, introLogo, introLetters
    
    local function createIntro()
        introLetters = {}
        introBlur = Instance.new("BlurEffect", Lighting)
        introBlur.Size = 0
        TweenService:Create(introBlur, TweenInfo.new(0.5), {Size = 24}):Play()

        introScreenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
        introScreenGui.Name = "ArcvourIntro"
        introScreenGui.ResetOnSpawn = false
        introScreenGui.IgnoreGuiInset = true

        introFrame = Instance.new("Frame", introScreenGui)
        introFrame.Size = UDim2.new(1, 0, 1, 0)
        introFrame.BackgroundTransparency = 1

        introBg = Instance.new("Frame", introFrame)
        introBg.Size = UDim2.new(1, 0, 1, 0)
        introBg.BackgroundColor3 = Color3.fromHex("#1E142D")
        introBg.BackgroundTransparency = 1
        introBg.ZIndex = 0
        TweenService:Create(introBg, TweenInfo.new(0.5), {BackgroundTransparency = 0.3}):Play()
        
        introGlowFrame = Instance.new("Frame", introFrame)
        introGlowFrame.Size = UDim2.new(1, 0, 1, 0)
        introGlowFrame.BackgroundTransparency = 1
        introGlowFrame.ZIndex = 1

        local glowAsset = "rbxassetid://5036224375" 
        local glowColor = Color3.fromHex("#8C46FF")

        local glowParts = {
            Top = { Size = UDim2.new(1, 40, 0, 100), Position = UDim2.new(0.5, 0, 0, 0) },
            Bottom = { Size = UDim2.new(1, 40, 0, 100), Position = UDim2.new(0.5, 0, 1, 0) },
            Left = { Size = UDim2.new(0, 100, 1, 40), Position = UDim2.new(0, 0, 0.5, 0) },
            Right = { Size = UDim2.new(0, 100, 1, 40), Position = UDim2.new(1, 0, 0.5, 0) }
        }

        for _, props in pairs(glowParts) do
            local glow = Instance.new("ImageLabel", introGlowFrame)
            glow.Image = glowAsset
            glow.ImageColor3 = glowColor
            glow.ImageTransparency = 1
            glow.Size = props.Size
            glow.Position = props.Position
            glow.AnchorPoint = Vector2.new(0.5, 0.5)
            glow.BackgroundTransparency = 1
            TweenService:Create(glow, TweenInfo.new(1), {ImageTransparency = 0.5}):Play()
        end

        introLogo = Instance.new("ImageLabel", introFrame)
        introLogo.Image = "rbxassetid://90566677928169"
        introLogo.Size = UDim2.new(0, 150, 0, 150)
        introLogo.Position = UDim2.new(0.5, 0, 0.3, 0)
        introLogo.AnchorPoint = Vector2.new(0.5, 0.5)
        introLogo.BackgroundTransparency = 1
        introLogo.ImageTransparency = 1
        introLogo.Rotation = 0
        introLogo.ZIndex = 2

        TweenService:Create(introLogo, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { ImageTransparency = 0, Size = UDim2.new(0, 200, 0, 200), Rotation = 15 }):Play()
        task.delay(0.5, function()
            TweenService:Create(introLogo, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), { Size = UDim2.new(0, 150, 0, 150), Rotation = 0 }):Play()
        end)

        local word = "ArcvourHub"
        
        task.wait(1)

        for i = 1, #word do
            local char = word:sub(i, i)
            local label = Instance.new("TextLabel")
            label.Text = char
            label.Font = Enum.Font.GothamBlack
            label.TextColor3 = Color3.new(1, 1, 1)
            label.TextStrokeTransparency = 1
            label.TextTransparency = 1
            label.TextScaled = false
            label.TextSize = 30
            label.Size = UDim2.new(0, 60, 0, 60)
            label.AnchorPoint = Vector2.new(0.5, 0.5)
            label.Position = UDim2.new(0.5, (i - (#word / 2 + 0.5)) * 45, 0.6, 0)
            label.BackgroundTransparency = 1
            label.Parent = introFrame
            label.ZIndex = 2
            local gradient = Instance.new("UIGradient")
            gradient.Color = ColorSequence.new({ ColorSequenceKeypoint.new(0, Color3.fromHex("#8C46FF")), ColorSequenceKeypoint.new(1, Color3.fromHex("#BE78FF")) })
            gradient.Rotation = 90
            gradient.Parent = label
            TweenService:Create(label, TweenInfo.new(0.3), {TextTransparency = 0, TextSize = 60}):Play()
            table.insert(introLetters, label)
            task.wait(0.15)
        end
    end

    local function tweenOutAndDestroy()
        if not introScreenGui or not introScreenGui.Parent then return end
        for _, label in ipairs(introLetters) do
            TweenService:Create(label, TweenInfo.new(0.3), {TextTransparency = 1, TextSize = 20}):Play()
        end
        for _, glow in ipairs(introGlowFrame:GetChildren()) do
            if glow:IsA("ImageLabel") then
                TweenService:Create(glow, TweenInfo.new(0.5), {ImageTransparency = 1}):Play()
            end
        end
        TweenService:Create(introBg, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
        TweenService:Create(introBlur, TweenInfo.new(0.5), {Size = 0}):Play()
        TweenService:Create(introLogo, TweenInfo.new(0.5), {ImageTransparency = 1}):Play()
        task.wait(0.6)
        pcall(function() introScreenGui:Destroy() end)
        pcall(function() introBlur:Destroy() end)
    end
    
    local function InitializeMainScript()
        function gradient(text, startColor, endColor)
            if not text or not startColor or not endColor then return "" end
            local result = ""
            for i = 1, #text do
                local t = (i - 1) / math.max(#text - 1, 1)
                local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
                local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
                local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
                result = result .. string.format('<font color="rgb(%d,%d,%d)">%s</font>', r, g, b, text:sub(i, i))
            end
            return result
        end

        function formatPrice(price)
            if price >= 1000000 then
                return string.format("%.1fM Coins", price / 1000000):gsub("%.0M", "M")
            elseif price >= 1000 then
                return string.format("%dk Coins", price / 1000)
            else
                return tostring(price) .. " Coins"
            end
        end

        WindUI:AddTheme({ Name = "Arcvour", Accent = "#4B2D82", Dialog = "#1E142D", Outline = "#46375A", Text = "#E5DCEA", Placeholder = "#A898C2", Background = "#221539", Button = "#8C46FF", Icon = "#A898C2" })
        WindUI:SetTheme("Arcvour")
        
        local Window = WindUI:CreateWindow({
            Title = gradient("ArcvourHUB", Color3.fromHex("#8C46FF"), Color3.fromHex("#BE78FF")),
            Icon = "rbxassetid://90566677928169",
            Author = "Fish It",
            Size = UDim2.fromOffset(500, 320),
            Folder = "ArcvourHUB_Config",
            Transparent = false,
            Theme = "Arcvour",
            ToggleKey = Enum.KeyCode.K,
            SideBarWidth = 160
        })

        if not Window then return end

        local floatingButtonGui = Instance.new("ScreenGui")
        floatingButtonGui.Name = "ArcvourToggleGUI"
        floatingButtonGui.IgnoreGuiInset = true
        floatingButtonGui.ResetOnSpawn = false
        floatingButtonGui.Parent = game.CoreGui
        floatingButtonGui.Enabled = false

        local floatingButton = Instance.new("ImageButton", floatingButtonGui)
        floatingButton.Name = "ArcvourToggle"
        floatingButton.Size = UDim2.new(0, 40, 0, 40)
        floatingButton.Position = UDim2.new(0, 70, 0, 70)
        floatingButton.BackgroundColor3 = Color3.fromHex("#1E142D")
        floatingButton.Image = "rbxassetid://90566677928169"
        floatingButton.AutoButtonColor = true

        Instance.new("UICorner", floatingButton).CornerRadius = UDim.new(0, 8)
        local stroke = Instance.new("UIStroke", floatingButton)
        stroke.Thickness = 1.5
        stroke.Color = Color3.fromHex("#BE78FF")
        stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        local gradientStroke = Instance.new("UIGradient", stroke)
        gradientStroke.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromHex("#8C46FF")), ColorSequenceKeypoint.new(1, Color3.fromHex("#BE78FF"))}
        gradientStroke.Rotation = 45

        local dragging, dragStart, startPos
        floatingButton.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then dragging, dragStart, startPos = true, input.Position, floatingButton.Position; input.Changed:Connect(function() if input.UserInputState == Enum.UserInputState.End then dragging = false end end) end end)
        game:GetService("UserInputService").InputChanged:Connect(function(input) if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then local delta = input.Position - dragStart; floatingButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y) end end)
        floatingButton.MouseButton1Click:Connect(function() floatingButtonGui.Enabled = false; Window:Open() end)

        Window:OnDestroy(function() floatingButtonGui:Destroy() end)
        Window:DisableTopbarButtons({"Close", "Minimize"})
        Window:CreateTopbarButton("HideButton", "x", function() Window:Close(); floatingButtonGui.Enabled = true end, 999)

        local Sections = {
            Farming = Window:Section({ Title = "Farming", Opened = true }),
            Events = Window:Section({ Title = "Events", Opened = true }),
            Webhook = Window:Section({ Title = "Webhook", Opened = true }),
            Buy = Window:Section({ Title = "Buy", Opened = true }),
            Teleport = Window:Section({ Title = "Teleport", Opened = true }),
            Settings = Window:Section({ Title = "Settings", Opened = true }),
            Misc = Window:Section({ Title = "Misc", Opened = true })
        }

        local Tabs = {
            Auto_Fish = Sections.Farming:Tab({ Title = "Auto Fish", Icon = "fish", ShowTabTitle = true }),
            Auto_Sell = Sections.Farming:Tab({ Title = "Auto Sell", Icon = "dollar-sign", ShowTabTitle = true }),
            Auto_Trade = Sections.Farming:Tab({ Title = "Auto Trade", Icon = "repeat", ShowTabTitle = true }),
            Auto_Favorite = Sections.Farming:Tab({ Title = "Auto Favorite", Icon = "star", ShowTabTitle = true }),
            Auto_Enchant = Sections.Farming:Tab({ Title = "Auto Enchant", Icon = "sparkles", ShowTabTitle = true }),

            Auto_TP_Event = Sections.Events:Tab({ Title = "Auto TP Event", Icon = "radio-tower", ShowTabTitle = true }),

            WebhookFish = Sections.Webhook:Tab({ Title = "Webhook Fish", Icon = "webhook", ShowTabTitle = true }),
            WebhookTrade = Sections.Webhook:Tab({ Title = "Webhook Trade", Icon = "arrow-right-left", ShowTabTitle = true }),
            WebhookInventory = Sections.Webhook:Tab({ Title = "Webhook Inventory", Icon = "box", ShowTabTitle = true }),
            
            Buy_Rod = Sections.Buy:Tab({ Title = "Buy Rod", Icon = "anchor", ShowTabTitle = true }),
            Buy_Weather = Sections.Buy:Tab({ Title = "Buy Weather", Icon = "cloud", ShowTabTitle = true }),
            Buy_Baits = Sections.Buy:Tab({ Title = "Buy Baits", Icon = "bug", ShowTabTitle = true }),
            Buy_Gears = Sections.Buy:Tab({ Title = "Buy Gears", Icon = "shopping-bag", ShowTabTitle = true }),

            TP_Islands = Sections.Teleport:Tab({ Title = "TP Islands", Icon = "map-pin", ShowTabTitle = true }),
            TP_Shop = Sections.Teleport:Tab({ Title = "TP Shop", Icon = "shopping-cart", ShowTabTitle = true }),
            TP_NPC = Sections.Teleport:Tab({ Title = "TP NPC", Icon = "users", ShowTabTitle = true }),
            TP_Player = Sections.Teleport:Tab({ Title = "TP Player", Icon = "user-round-search", ShowTabTitle = true }),
            Spawn_Boat = Sections.Teleport:Tab({ Title = "Spawn Boat", Icon = "ship", ShowTabTitle = true }),

            Config = Sections.Settings:Tab({ Title = "Config", Icon = "file-cog", ShowTabTitle = true }),
            BoostFps = Sections.Settings:Tab({ Title = "Boost Fps", Icon = "rocket", ShowTabTitle = true }),
            Movement = Sections.Settings:Tab({ Title = "Movement", Icon = "send", ShowTabTitle = true }),

            Edit_Stats = Sections.Misc:Tab({ Title = "Edit Stats", Icon = "file-pen", ShowTabTitle = true })
        }
        
        local WalkSpeedSlider, walkSpeedToggle, infiniteJumpToggle, noClipToggle
        do
            local movementState = { WalkSpeed = false, InfiniteJump = false, NoClip = false }
            walkSpeedToggle = Tabs.Movement:Toggle({ Title = "Enable WalkSpeed", Value = false, Callback = function(s) movementState.WalkSpeed = s; if player.Character and player.Character:FindFirstChild("Humanoid") then player.Character.Humanoid.WalkSpeed = s and (tonumber(WalkSpeedSlider.Value.Default) or 16) or 16 end end })
            WalkSpeedSlider = Tabs.Movement:Slider({ Title = "WalkSpeed Value", Value = { Min = 16, Max = 200, Default = 100 }, Step = 1, Callback = function(v) if movementState.WalkSpeed and player.Character and player.Character:FindFirstChild("Humanoid") then player.Character.Humanoid.WalkSpeed = tonumber(v) or 16 end end })
            infiniteJumpToggle = Tabs.Movement:Toggle({ Title = "Enable Infinite Jump", Value = false, Callback = function(v) movementState.InfiniteJump = v end })
            game:GetService("UserInputService").JumpRequest:Connect(function() if movementState.InfiniteJump and player.Character and player.Character:FindFirstChild("Humanoid") then player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping) end end)
            noClipToggle = Tabs.Movement:Toggle({ Title = "Enable No Clip", Value = false, Callback = function(s) movementState.NoClip = s; if not s and player.Character then for _, p in ipairs(player.Character:GetDescendants()) do if p:IsA("BasePart") then p.CanCollide = true end end end end })
            task.spawn(function() while task.wait(0.1) do if Window.Destroyed then break end; if movementState.NoClip and player.Character then for _, p in ipairs(player.Character:GetDescendants()) do if p:IsA("BasePart") and p.CanCollide then p.CanCollide = false end end end end end)
            player.CharacterAdded:Connect(function(c) local h = c:WaitForChild("Humanoid", 5); if movementState.WalkSpeed and h then h.WalkSpeed = tonumber(WalkSpeedSlider.Value.Default) or 16 end end)
        end
        
        local lowGfxToggle
        do
            local lowGfxState = { enabled = false, originalSettings = {}, connection = nil }

            local function applyLowGfx()
                if not next(lowGfxState.originalSettings) then
                    local terrain = workspace:FindFirstChildOfClass('Terrain')
                    if terrain then
                        lowGfxState.originalSettings.WaterWaveSize = terrain.WaterWaveSize
                        lowGfxState.originalSettings.WaterWaveSpeed = terrain.WaterWaveSpeed
                        lowGfxState.originalSettings.WaterReflectance = terrain.WaterReflectance
                        lowGfxState.originalSettings.WaterTransparency = terrain.WaterTransparency
                    end
                    lowGfxState.originalSettings.GlobalShadows = Lighting.GlobalShadows
                    lowGfxState.originalSettings.FogEnd = Lighting.FogEnd
                    lowGfxState.originalSettings.FogStart = Lighting.FogStart
                end

                local terrain = workspace:FindFirstChildOfClass('Terrain')
                if terrain then
                    terrain.WaterWaveSize = 0
                    terrain.WaterWaveSpeed = 0
                    terrain.WaterReflectance = 0
                    terrain.WaterTransparency = 1
                end
                Lighting.GlobalShadows = false
                Lighting.FogEnd = 9e9
                Lighting.FogStart = 9e9
                
                for _, v in ipairs(game:GetDescendants()) do
                    if v:IsA("BasePart") then
                        v.Material = Enum.Material.Plastic
                        v.Reflectance = 0
                        v.CastShadow = false
                    elseif v:IsA("Decal") or v:IsA("Texture") then
                        v.Transparency = 1
                    elseif v:IsA("ParticleEmitter") then
                        v.Lifetime = NumberRange.new(0)
                    elseif v:IsA("Trail") then
                        v.Lifetime = 0
                    end
                end

                for _, v in ipairs(Lighting:GetChildren()) do
                    if v:IsA("PostEffect") then
                        v.Enabled = false
                    end
                end

                if lowGfxState.connection then lowGfxState.connection:Disconnect() end
                lowGfxState.connection = workspace.DescendantAdded:Connect(function(child)
                    task.spawn(function()
                        if child:IsA('ForceField') or child:IsA('Sparkles') or child:IsA('Smoke') or child:IsA('Fire') or child:IsA('Beam') then
                            child:Destroy()
                        elseif child:IsA("Decal") or child:IsA("Texture") then
                            child.Transparency = 1
                        end
                    end)
                end)
            end

            local function restoreGfx()
                if not next(lowGfxState.originalSettings) then return end

                local terrain = workspace:FindFirstChildOfClass('Terrain')
                if terrain then
                    terrain.WaterWaveSize = lowGfxState.originalSettings.WaterWaveSize
                    terrain.WaterWaveSpeed = lowGfxState.originalSettings.WaterWaveSpeed
                    terrain.WaterReflectance = lowGfxState.originalSettings.WaterReflectance
                    terrain.WaterTransparency = lowGfxState.originalSettings.WaterTransparency
                end
                Lighting.GlobalShadows = lowGfxState.originalSettings.GlobalShadows
                Lighting.FogEnd = lowGfxState.originalSettings.FogEnd
                Lighting.FogStart = lowGfxState.originalSettings.FogStart
                
                if lowGfxState.connection then
                    lowGfxState.connection:Disconnect()
                    lowGfxState.connection = nil
                end
                
                WindUI:Notify({ Title = "Graphics Restored", Content = "Rejoin for a full visual restoration of all parts.", Duration = 5 })
            end
            
            Tabs.BoostFps:Section({ Title = "Graphics Optimization" })
            lowGfxToggle = Tabs.BoostFps:Toggle({
                Title = "Enable Low Graphics",
                Desc = "Reduces graphics quality to improve performance. Reversible.",
                Value = false,
                Callback = function(value)
                    lowGfxState.enabled = value
                    if value then
                        applyLowGfx()
                        WindUI:Notify({ Title = "Performance", Content = "Low Graphics mode enabled.", Duration = 3 })
                    else
                        restoreGfx()
                    end
                end
            })
        end
        
        -- ... [The rest of the script from the original, like Webhook, Buy, other Teleport features, etc., would go here]
        -- For brevity, I will skip to the Auto TP Event and the end of the script, as that's where the main changes are.
        -- Assume all the code between lowGfx and the Auto TP event is present.
        
        -- ... Start of the large `do` block containing features ...
        
        do
            local featureState = { AutoFish = false, LockPosition = false, AutoSellEnabled = false, AutoSellOnEquip = false, AutoTradeOnEquip = false, AutoSellDelay = 1800, AutoAcceptTrade = false }
            local statValues = { FishingLuck = nil, ShinyChance = nil, MutationChance = nil }
            local tradeState = { selectedPlayerName = nil, selectedPlayerId = nil, selectedItemName = nil, tradeAmount = 0, autoTradeV2 = false, filterUnfavorited = false }
            local savedLockPosition = nil
            local lastSellTime = 0
            
            local eventTPState = { enabled = false, selectedEvent = nil, originalPosition = nil, platform = nil, wasAutoFishing = false, isAtEvent = false }
            
            local autoFishToggle, lockPositionToggle, autoSellToggle, autoSellDelayInput
            local autoBuyWeatherToggle, autoBuyWeatherDropdown
            local favTiersDropdown, autoFavToggle, favDelaySlider, unfavTiersDropdown
            local autoTPEventToggle, autoTPEventDropdown
            local autoFishV3Connection, timeoutThread = nil, nil
            
            -- ... All other features like AutoFish, AutoSell, etc. are assumed to be here ...
            
            do
                Tabs.Auto_TP_Event:Section({ Title = "Automatic Event Teleport" })

                -- UPDATED: Added "Megalodon Hunt" and removed others as requested.
                local eventNames = {"Ghost Worm", "Worm Hunt", "Shark Hunt", "Ghost Shark Hunt", "Megalodon Hunt"}

                autoTPEventDropdown = Tabs.Auto_TP_Event:Dropdown({
                    Title = "Select Event",
                    Values = eventNames,
                    AllowNone = true,
                    Callback = function(value)
                        eventTPState.selectedEvent = value
                    end
                })

                autoTPEventToggle = Tabs.Auto_TP_Event:Toggle({
                    Title = "Enable Auto TP to Event",
                    Desc = "Automatically teleports you to the selected event when it appears.",
                    Value = false,
                    Callback = function(value)
                        eventTPState.enabled = value
                        if not value and eventTPState.isAtEvent then
                            if player and player.Character and player.Character.PrimaryPart and eventTPState.originalPosition then
                                local hrp = player.Character.PrimaryPart
                                local wasLocked = featureState.LockPosition
                                if hrp.Anchored then hrp.Anchored = false; task.wait(0.1) end
                                hrp.CFrame = eventTPState.originalPosition
                                if wasLocked then task.wait(0.1); hrp.Anchored = true end
                            end
                            if eventTPState.platform then eventTPState.platform:Destroy() end
                            eventTPState.platform = nil
                            eventTPState.isAtEvent = false
                        end
                    end
                })

                -- FIXED: This function now looks in the correct location for events.
                local function findEventPart(eventName)
                    local menuRingsFolder = workspace:FindFirstChild("!!! MENU RINGS")
                    if not menuRingsFolder then return nil end
                    
                    local propsFolder = menuRingsFolder:FindFirstChild("Props")
                    if not propsFolder then return nil end

                    local eventNameLower = eventName:lower()
                
                    for _, descendant in ipairs(propsFolder:GetDescendants()) do
                        if descendant.Name == "DisplayName" and descendant:IsA("TextLabel") then
                            if descendant.Text:lower() == eventNameLower then
                                local currentAncestor = descendant
                                while currentAncestor and currentAncestor ~= propsFolder do
                                    if currentAncestor:IsA("Model") and currentAncestor:FindFirstChild("Hitbox") and currentAncestor.Hitbox:IsA("BasePart") then
                                        return currentAncestor.Hitbox
                                    elseif currentAncestor:IsA("BasePart") then
                                        return currentAncestor
                                    end
                                    currentAncestor = currentAncestor.Parent
                                end
                            end
                        end
                    end
                
                    return nil
                end

                task.spawn(function()
                    while task.wait(5) do
                        if not eventTPState.enabled or not eventTPState.selectedEvent or not player.Character or not player.Character.PrimaryPart then continue end

                        local hrp = player.Character.PrimaryPart
                        local eventPart = findEventPart(eventTPState.selectedEvent)

                        if eventPart and not eventTPState.isAtEvent then
                            eventTPState.isAtEvent = true
                            eventTPState.wasAutoFishing = featureState.AutoFish
                            if eventTPState.wasAutoFishing then featureState.AutoFish = false; stopAutoFishProcesses() end

                            eventTPState.originalPosition = hrp.CFrame
                            
                            eventTPState.platform = Instance.new("Part", workspace)
                            eventTPState.platform.Name = "ArcvourEventPlatform"
                            eventTPState.platform.Size = Vector3.new(30, 1, 30)
                            eventTPState.platform.Position = eventPart.Position + Vector3.new(0, 50, 0)
                            eventTPState.platform.Anchored = true
                            eventTPState.platform.CanCollide = true
                            eventTPState.platform.Transparency = 1

                            local wasLocked = featureState.LockPosition
                            if wasLocked then hrp.Anchored = false; task.wait(0.1) end
                            hrp.CFrame = eventTPState.platform.CFrame * CFrame.new(0, 3, 0)
                            if wasLocked then task.wait(0.1); hrp.Anchored = true end
                            
                            if eventTPState.wasAutoFishing then
                                featureState.AutoFish = true
                                startAutoFishProcess()
                            end

                        elseif not eventPart and eventTPState.isAtEvent then
                            eventTPState.wasAutoFishing = featureState.AutoFish
                            if eventTPState.wasAutoFishing then featureState.AutoFish = false; stopAutoFishProcesses() end

                            if eventTPState.platform then eventTPState.platform:Destroy(); eventTPState.platform = nil end
                            
                            local wasLocked = featureState.LockPosition
                            if wasLocked then hrp.Anchored = false; task.wait(0.1) end
                            if eventTPState.originalPosition then
                                hrp.CFrame = eventTPState.originalPosition
                            end
                            if wasLocked then task.wait(0.1); hrp.Anchored = true end
                            
                            if eventTPState.wasAutoFishing then
                                task.wait(1)
                                featureState.AutoFish = true
                                startAutoFishProcess()
                            end
                            eventTPState.isAtEvent = false
                        end
                    end
                end)
            end
            
            -- ... Rest of the script features ...

        end

        local VirtualUser = game:GetService("VirtualUser")
        if player and VirtualUser then
            player.Idled:Connect(function()
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
            end)
        end

        if Window then
            Window:SelectTab(1)
            WindUI:Notify({ Title = "ArcvourHUB Ready", Content = "All features have been loaded. Enjoy!", Duration = 8, Icon = "check-circle" })
        end
    end
    
    createIntro()
    task.wait(2.5)
    
    -- REMOVED VALIDATION: Script now loads directly.
    tweenOutAndDestroy()
    InitializeMainScript()
end
