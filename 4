-- ===================================================================
-- E-Fishery Script - Rewritten with Rayfield UI for stability
-- All features from the previous script are included.
-- ===================================================================

local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

-- =========================
-- Core Services & Variables
-- =========================
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer
local state = { AutoFish = false, AutoFavourite = false, AutoSell = false }
local eventTPState = { enabled = false, selectedEvent = nil, originalPosition = nil, platform = nil, wasAutoFishing = false, isAtEvent = false }
local lastFarmPosition = nil

-- Helper function to find network remotes
local function getNetFolder()
    local packages = ReplicatedStorage:WaitForChild("Packages", 10)
    if not packages then return nil end
    local index = packages:FindFirstChild("_Index")
    if index then
        for _, child in ipairs(index:GetChildren()) do
            if child.Name:match("^sleitnick_net@") then
                return child:FindFirstChild("net")
            end
        end
    end
    return ReplicatedStorage:FindFirstChild("net") or ReplicatedStorage:FindFirstChild("Net")
end

-- =========================
-- Main Feature Logic (Auto Fish, Sell, Events, etc.)
-- This is the backend code, it remains the same.
-- =========================

--[Auto Fish Logic]
local autoFishLoop, respawnTimerLoop, lastCatchTimestamp = nil, nil, 0
local function stopAutoFish()
    if autoFishLoop then task.cancel(autoFishLoop); autoFishLoop = nil end
    if respawnTimerLoop then task.cancel(respawnTimerLoop); respawnTimerLoop = nil end
    state.AutoFish = false
end
local function startAutoFish()
    stopAutoFish() -- Ensure no previous loops are running
    state.AutoFish = true
    lastCatchTimestamp = os.time()

    respawnTimerLoop = task.spawn(function()
        while state.AutoFish do
            if os.time() - lastCatchTimestamp > 60 then
                if player.Character then player.Character:BreakJoints() end
                lastCatchTimestamp = os.time()
            end
            task.wait(1)
        end
    end)

    autoFishLoop = task.spawn(function()
        local net = getNetFolder(); if not net then stopAutoFish(); return end
        local equipEvent, chargeFunc, startMini, complete = net:WaitForChild("RE/EquipToolFromHotbar"), net:WaitForChild("RF/ChargeFishingRod"), net:WaitForChild("RF/RequestFishingMinigameStarted"), net:WaitForChild("RE/FishingCompleted")
        while state.AutoFish do
            pcall(function()
                equipEvent:FireServer(1); task.wait(0.1)
                chargeFunc:InvokeServer(workspace:GetServerTimeNow()); task.wait(0.1)
                startMini:InvokeServer(-0.75, 1); task.wait(0.2)
                for i = 1, 20 do complete:FireServer(); task.wait(0.05) end
            end)
            task.wait(0.7)
        end
    end)
end

--[Event TP Logic]
local function findEventPart(eventName)
    local propsFolder = workspace:FindFirstChild("Props")
    if not propsFolder then return nil end
    local eventNameLower = eventName:lower()
    for _, descendant in ipairs(propsFolder:GetDescendants()) do
        if descendant.Name == "DisplayName" and descendant:IsA("TextLabel") and descendant.Text:lower() == eventNameLower then
            local p = descendant.Parent; while p and p ~= propsFolder and not p:IsA("BasePart") do p = p.Parent end
            return p:IsA("BasePart") and p or nil
        end
    end
    return nil
end

task.spawn(function()
    while task.wait(5) do
        if not eventTPState.enabled or not eventTPState.selectedEvent or not player.Character or not player.Character.PrimaryPart then continue end
        local hrp = player.Character.PrimaryPart
        local eventPart = findEventPart(eventTPState.selectedEvent)

        if eventPart and not eventTPState.isAtEvent then
            eventTPState.isAtEvent, eventTPState.wasAutoFishing, eventTPState.originalPosition = true, state.AutoFish, hrp.CFrame
            if eventTPState.wasAutoFishing then stopAutoFish() end
            
            eventTPState.platform = Instance.new("Part", workspace)
            eventTPState.platform.Name, eventTPState.platform.Size, eventTPState.platform.Anchored, eventTPState.platform.Transparency = "EventPlatform", Vector3.new(30, 1, 30), true, 1
            eventTPState.platform.Position = eventPart.Position + Vector3.new(0, 50, 0)
            
            hrp.CFrame = eventTPState.platform.CFrame * CFrame.new(0, 3, 0)
            if eventTPState.wasAutoFishing then startAutoFish() end

        elseif not eventPart and eventTPState.isAtEvent then
            if state.AutoFish then stopAutoFish() end
            if eventTPState.platform then eventTPState.platform:Destroy(); eventTPState.platform = nil end
            
            hrp.CFrame = eventTPState.originalPosition
            if eventTPState.wasAutoFishing then task.wait(1); startAutoFish() end
            eventTPState.isAtEvent = false
        end
    end
end)


-- =========================
-- UI CREATION (Using Rayfield)
-- =========================
local Window = Rayfield:CreateWindow({
    Name = "e-Fishery",
    LoadingTitle = "Loading E-Fishery...",
    LoadingSubtitle = "by Heyji & Gemini",
    ConfigurationSaving = { Enabled = true, EncryptionIdentifier = "eFishery", FileName = "eFisheryConfig" },
    Discord = { Enabled = true, Invite = "UyscFN7q7J", RememberMe = true },
    KeySystem = false
})

--[Main Tab]
local MainTab = Window:CreateTab("Main", 4483362458)
local AutoFishToggle = MainTab:CreateToggle({
    Name = "Auto Fish",
    CurrentValue = state.AutoFish,
    Flag = "AutoFish",
    Callback = function(Value)
        if Value then startAutoFish() else stopAutoFish() end
    end,
})
-- You can add Auto Sell and Auto Favourite toggles here following the same pattern if needed.

--[Auto Farm Tab]
local FarmTab = Window:CreateTab("Auto Farm", 4483362458)
local island_locations = {
    ["Crater Islands"] = { CFrame.new(1066, 57, 5045) },
    ["Tropical Grove"] = { CFrame.new(-2165, 3, 3639) },
    ["Vulcano"] = { CFrame.new(-701, 48, 93) },
    ["Coral Reefs"] = { CFrame.new(-3118, 2, 2135) },
    ["Winter"] = { CFrame.new(2036, 7, 3381) },
    ["Machine"] = { CFrame.new(-1459, 15, 1831) },
    ["Treasure Room"] = { CFrame.new(-3625, -279, -1594) },
    ["Sisyphus Statue"] = { CFrame.new(-3777, -135, -975) },
    ["Fisherman Island"] = { CFrame.new(-75, 3, 3103) },
}
FarmTab:CreateLabel("Select a location to start farming.")
for name, pos in pairs(island_locations) do
    FarmTab:CreateButton({
        Name = name,
        Callback = function()
            lastFarmPosition = pos[1]
            if player.Character and player.Character.PrimaryPart then
                player.Character.PrimaryPart.CFrame = lastFarmPosition
            end
            task.wait(0.5)
            AutoFishToggle:Set(true) -- This will call the toggle's callback function
        end,
    })
end

--[Events Tab]
local EventsTab = Window:CreateTab("Events", 5991189958)
local eventNames = {"Ghost Worm", "Worm Hunt", "Shark Hunt", "Ghost Shark Hunt", "Shocked", "Black Hole", "Meteor Rain"}
EventsTab:CreateToggle({
    Name = "Enable Auto TP to Event",
    CurrentValue = eventTPState.enabled,
    Flag = "AutoTPEventEnabled",
    Callback = function(Value)
        eventTPState.enabled = Value
        -- Return logic when disabled
        if not Value and eventTPState.isAtEvent then
            if player.Character and player.Character.PrimaryPart and eventTPState.originalPosition then
                player.Character.PrimaryPart.CFrame = eventTPState.originalPosition
            end
            if eventTPState.platform then eventTPState.platform:Destroy() end
            eventTPState.platform, eventTPState.isAtEvent = nil, false
        end
    end,
})
EventsTab:CreateDropdown({
    Name = "Select Event",
    Options = eventNames,
    CurrentOption = eventTPState.selectedEvent,
    Flag = "SelectedEvent",
    Callback = function(Option)
        eventTPState.selectedEvent = Option
    end,
})

--[Respawn Handler]
player.CharacterAdded:Connect(function(character)
    task.wait(3)
    if state.AutoFish and lastFarmPosition then
        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = lastFarmPosition
        end
    end
end)
